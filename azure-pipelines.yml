# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'

stages:
- stage: api_build
  displayName: Api Build
  jobs:  
  - job: CI
    displayName: Api Build    
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'api'
        publishLocation: 'Container'

- stage: ui_build
  displayName: UI Build
  dependsOn: [] 
  jobs:  
  - job: ui_ci
    displayName: UI Build    
    steps:    
     - task: Npm@1
       inputs:
         command: 'install'
         workingDir: 'client'
         verbose: false
     - task: Npm@1
       inputs:
         command: 'custom'
         workingDir: 'client'
         customCommand: 'run build'     
     - task: PowerShell@2
       displayName: Templatize Config File
       inputs:
         targetType: 'inline'
         script: |
           Clear-Host
           $configFilePath="client/public/config.js"
           $configDataRaw = (Get-Content $configFilePath -raw)
           $firstCurlyBrace = $configDataRaw.IndexOf('{')
           $length = $configDataRaw.Length
           $savedPrefixData = $configDataRaw.Substring(0,$firstCurlyBrace +1 )
           $configDataRaw = $configDataRaw.Remove(0,$firstCurlyBrace)
           
           $configDataJson =$configDataRaw | ConvertFrom-Json
           
           $outputFile = $savedPrefixData
           $configDataJson | Get-Member -MemberType NoteProperty | ForEach-Object {
                   $key = $_.Name
                   #Write-Host $key
                   $outputFile += "$key :'#{$key}#',"
               }
           
           
           $outputFile += "}"
           Write-Host $outputFile
           Set-Content -Path client/public/config.js -value $outputFile
     - task: PublishBuildArtifacts@1
       displayName: Publish Artifacts
       inputs:
        PathtoPublish: 'client/build'
        ArtifactName: 'ui'
        publishLocation: 'Container'         

- stage: ui_deploy_dev
  displayName: Dev UI Deploy
  dependsOn: ui_build   
  jobs:
  - deployment:  Deploy
    displayName: Deploy        
    environment: 'ui-dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: replacetokens@3
            inputs:
              targetFiles: '$(Pipeline.Workspace)/ui/config.js'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'fail'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
              useLegacyPattern: false
              enableTelemetry: true
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here                
                ls
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/ui'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/ui-$(Build.BuildId).zip'
              replaceExistingArchive: true
              verbose: true

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'VS Ultimate'
              appType: 'webAppLinux'
              WebAppName: 'nnepal-react-wc-dev'
              packageForLinux: '$(Pipeline.Workspace)/ui-$(Build.BuildId).zip'
              StartupCommand: 'pm2 serve /home/site/wwwroot/ui --no-daemon --spa'